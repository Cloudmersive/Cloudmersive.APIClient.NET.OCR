/* 
 * ocrapi
 *
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NET.OCR.Client;
using Cloudmersive.APIClient.NET.OCR.Model;

namespace Cloudmersive.APIClient.NET.OCR.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPreprocessingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Convert an image of text into a binary (light and dark) view
        /// </summary>
        /// <remarks>
        /// Perform an advanced adaptive, machine learning-based binarization algorithm on the input image to prepare it for further OCR operations.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Object</returns>
        Object PreprocessingBinarize (System.IO.Stream imageFile);

        /// <summary>
        /// Convert an image of text into a binary (light and dark) view
        /// </summary>
        /// <remarks>
        /// Perform an advanced adaptive, machine learning-based binarization algorithm on the input image to prepare it for further OCR operations.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PreprocessingBinarizeWithHttpInfo (System.IO.Stream imageFile);
        /// <summary>
        /// Get the angle of the page / document / receipt
        /// </summary>
        /// <remarks>
        /// Analyzes a photo or image of a document and identifies the rotation angle of the page.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>GetPageAngleResult</returns>
        GetPageAngleResult PreprocessingGetPageAngle (System.IO.Stream imageFile);

        /// <summary>
        /// Get the angle of the page / document / receipt
        /// </summary>
        /// <remarks>
        /// Analyzes a photo or image of a document and identifies the rotation angle of the page.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of GetPageAngleResult</returns>
        ApiResponse<GetPageAngleResult> PreprocessingGetPageAngleWithHttpInfo (System.IO.Stream imageFile);
        /// <summary>
        /// Detect and unrotate a document image
        /// </summary>
        /// <remarks>
        /// Detect and unrotate an image of a document (e.g. that was scanned at an angle).  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Object</returns>
        Object PreprocessingUnrotate (System.IO.Stream imageFile);

        /// <summary>
        /// Detect and unrotate a document image
        /// </summary>
        /// <remarks>
        /// Detect and unrotate an image of a document (e.g. that was scanned at an angle).  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PreprocessingUnrotateWithHttpInfo (System.IO.Stream imageFile);
        /// <summary>
        /// Detect and unskew a photo of a document
        /// </summary>
        /// <remarks>
        /// Detect and unskew a photo of a document (e.g. taken on a cell phone) into a perfectly square image.  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Object</returns>
        Object PreprocessingUnskew (System.IO.Stream imageFile);

        /// <summary>
        /// Detect and unskew a photo of a document
        /// </summary>
        /// <remarks>
        /// Detect and unskew a photo of a document (e.g. taken on a cell phone) into a perfectly square image.  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PreprocessingUnskewWithHttpInfo (System.IO.Stream imageFile);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Convert an image of text into a binary (light and dark) view
        /// </summary>
        /// <remarks>
        /// Perform an advanced adaptive, machine learning-based binarization algorithm on the input image to prepare it for further OCR operations.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PreprocessingBinarizeAsync (System.IO.Stream imageFile);

        /// <summary>
        /// Convert an image of text into a binary (light and dark) view
        /// </summary>
        /// <remarks>
        /// Perform an advanced adaptive, machine learning-based binarization algorithm on the input image to prepare it for further OCR operations.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PreprocessingBinarizeAsyncWithHttpInfo (System.IO.Stream imageFile);
        /// <summary>
        /// Get the angle of the page / document / receipt
        /// </summary>
        /// <remarks>
        /// Analyzes a photo or image of a document and identifies the rotation angle of the page.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of GetPageAngleResult</returns>
        System.Threading.Tasks.Task<GetPageAngleResult> PreprocessingGetPageAngleAsync (System.IO.Stream imageFile);

        /// <summary>
        /// Get the angle of the page / document / receipt
        /// </summary>
        /// <remarks>
        /// Analyzes a photo or image of a document and identifies the rotation angle of the page.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (GetPageAngleResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPageAngleResult>> PreprocessingGetPageAngleAsyncWithHttpInfo (System.IO.Stream imageFile);
        /// <summary>
        /// Detect and unrotate a document image
        /// </summary>
        /// <remarks>
        /// Detect and unrotate an image of a document (e.g. that was scanned at an angle).  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PreprocessingUnrotateAsync (System.IO.Stream imageFile);

        /// <summary>
        /// Detect and unrotate a document image
        /// </summary>
        /// <remarks>
        /// Detect and unrotate an image of a document (e.g. that was scanned at an angle).  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PreprocessingUnrotateAsyncWithHttpInfo (System.IO.Stream imageFile);
        /// <summary>
        /// Detect and unskew a photo of a document
        /// </summary>
        /// <remarks>
        /// Detect and unskew a photo of a document (e.g. taken on a cell phone) into a perfectly square image.  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PreprocessingUnskewAsync (System.IO.Stream imageFile);

        /// <summary>
        /// Detect and unskew a photo of a document
        /// </summary>
        /// <remarks>
        /// Detect and unskew a photo of a document (e.g. taken on a cell phone) into a perfectly square image.  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PreprocessingUnskewAsyncWithHttpInfo (System.IO.Stream imageFile);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PreprocessingApi : IPreprocessingApi
    {
        private Cloudmersive.APIClient.NET.OCR.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PreprocessingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PreprocessingApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NET.OCR.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NET.OCR.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PreprocessingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PreprocessingApi(Cloudmersive.APIClient.NET.OCR.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NET.OCR.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NET.OCR.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.OCR.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.OCR.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Convert an image of text into a binary (light and dark) view Perform an advanced adaptive, machine learning-based binarization algorithm on the input image to prepare it for further OCR operations.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Object</returns>
        public Object PreprocessingBinarize (System.IO.Stream imageFile)
        {
             ApiResponse<Object> localVarResponse = PreprocessingBinarizeWithHttpInfo(imageFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert an image of text into a binary (light and dark) view Perform an advanced adaptive, machine learning-based binarization algorithm on the input image to prepare it for further OCR operations.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PreprocessingBinarizeWithHttpInfo (System.IO.Stream imageFile)
        {
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling PreprocessingApi->PreprocessingBinarize");

            var localVarPath = "/ocr/preprocessing/image/binarize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreprocessingBinarize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Convert an image of text into a binary (light and dark) view Perform an advanced adaptive, machine learning-based binarization algorithm on the input image to prepare it for further OCR operations.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PreprocessingBinarizeAsync (System.IO.Stream imageFile)
        {
             ApiResponse<Object> localVarResponse = await PreprocessingBinarizeAsyncWithHttpInfo(imageFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert an image of text into a binary (light and dark) view Perform an advanced adaptive, machine learning-based binarization algorithm on the input image to prepare it for further OCR operations.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PreprocessingBinarizeAsyncWithHttpInfo (System.IO.Stream imageFile)
        {
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling PreprocessingApi->PreprocessingBinarize");

            var localVarPath = "/ocr/preprocessing/image/binarize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreprocessingBinarize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get the angle of the page / document / receipt Analyzes a photo or image of a document and identifies the rotation angle of the page.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>GetPageAngleResult</returns>
        public GetPageAngleResult PreprocessingGetPageAngle (System.IO.Stream imageFile)
        {
             ApiResponse<GetPageAngleResult> localVarResponse = PreprocessingGetPageAngleWithHttpInfo(imageFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the angle of the page / document / receipt Analyzes a photo or image of a document and identifies the rotation angle of the page.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of GetPageAngleResult</returns>
        public ApiResponse< GetPageAngleResult > PreprocessingGetPageAngleWithHttpInfo (System.IO.Stream imageFile)
        {
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling PreprocessingApi->PreprocessingGetPageAngle");

            var localVarPath = "/ocr/preprocessing/image/get-page-angle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreprocessingGetPageAngle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPageAngleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPageAngleResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPageAngleResult)));
        }

        /// <summary>
        /// Get the angle of the page / document / receipt Analyzes a photo or image of a document and identifies the rotation angle of the page.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of GetPageAngleResult</returns>
        public async System.Threading.Tasks.Task<GetPageAngleResult> PreprocessingGetPageAngleAsync (System.IO.Stream imageFile)
        {
             ApiResponse<GetPageAngleResult> localVarResponse = await PreprocessingGetPageAngleAsyncWithHttpInfo(imageFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the angle of the page / document / receipt Analyzes a photo or image of a document and identifies the rotation angle of the page.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (GetPageAngleResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPageAngleResult>> PreprocessingGetPageAngleAsyncWithHttpInfo (System.IO.Stream imageFile)
        {
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling PreprocessingApi->PreprocessingGetPageAngle");

            var localVarPath = "/ocr/preprocessing/image/get-page-angle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreprocessingGetPageAngle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPageAngleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPageAngleResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPageAngleResult)));
        }

        /// <summary>
        /// Detect and unrotate a document image Detect and unrotate an image of a document (e.g. that was scanned at an angle).  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Object</returns>
        public Object PreprocessingUnrotate (System.IO.Stream imageFile)
        {
             ApiResponse<Object> localVarResponse = PreprocessingUnrotateWithHttpInfo(imageFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detect and unrotate a document image Detect and unrotate an image of a document (e.g. that was scanned at an angle).  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PreprocessingUnrotateWithHttpInfo (System.IO.Stream imageFile)
        {
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling PreprocessingApi->PreprocessingUnrotate");

            var localVarPath = "/ocr/preprocessing/image/unrotate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreprocessingUnrotate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Detect and unrotate a document image Detect and unrotate an image of a document (e.g. that was scanned at an angle).  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PreprocessingUnrotateAsync (System.IO.Stream imageFile)
        {
             ApiResponse<Object> localVarResponse = await PreprocessingUnrotateAsyncWithHttpInfo(imageFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detect and unrotate a document image Detect and unrotate an image of a document (e.g. that was scanned at an angle).  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PreprocessingUnrotateAsyncWithHttpInfo (System.IO.Stream imageFile)
        {
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling PreprocessingApi->PreprocessingUnrotate");

            var localVarPath = "/ocr/preprocessing/image/unrotate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreprocessingUnrotate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Detect and unskew a photo of a document Detect and unskew a photo of a document (e.g. taken on a cell phone) into a perfectly square image.  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Object</returns>
        public Object PreprocessingUnskew (System.IO.Stream imageFile)
        {
             ApiResponse<Object> localVarResponse = PreprocessingUnskewWithHttpInfo(imageFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detect and unskew a photo of a document Detect and unskew a photo of a document (e.g. taken on a cell phone) into a perfectly square image.  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PreprocessingUnskewWithHttpInfo (System.IO.Stream imageFile)
        {
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling PreprocessingApi->PreprocessingUnskew");

            var localVarPath = "/ocr/preprocessing/image/unskew";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreprocessingUnskew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Detect and unskew a photo of a document Detect and unskew a photo of a document (e.g. taken on a cell phone) into a perfectly square image.  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PreprocessingUnskewAsync (System.IO.Stream imageFile)
        {
             ApiResponse<Object> localVarResponse = await PreprocessingUnskewAsyncWithHttpInfo(imageFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detect and unskew a photo of a document Detect and unskew a photo of a document (e.g. taken on a cell phone) into a perfectly square image.  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.OCR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PreprocessingUnskewAsyncWithHttpInfo (System.IO.Stream imageFile)
        {
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling PreprocessingApi->PreprocessingUnskew");

            var localVarPath = "/ocr/preprocessing/image/unskew";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreprocessingUnskew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
