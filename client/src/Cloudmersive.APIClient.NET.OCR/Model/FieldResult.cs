/* 
 * ocrapi
 *
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.OCR.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.OCR.Model
{
    /// <summary>
    /// A pairing target field and actual value read from form
    /// </summary>
    [DataContract]
    public partial class FieldResult :  IEquatable<FieldResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldResult" /> class.
        /// </summary>
        /// <param name="targetField">Target field to extract from the form.</param>
        /// <param name="fieldValues">Result field value(s) extracted.</param>
        public FieldResult(FormFieldDefinition targetField = default(FormFieldDefinition), List<OcrPhotoTextElement> fieldValues = default(List<OcrPhotoTextElement>))
        {
            this.TargetField = targetField;
            this.FieldValues = fieldValues;
        }
        
        /// <summary>
        /// Target field to extract from the form
        /// </summary>
        /// <value>Target field to extract from the form</value>
        [DataMember(Name="TargetField", EmitDefaultValue=false)]
        public FormFieldDefinition TargetField { get; set; }

        /// <summary>
        /// Result field value(s) extracted
        /// </summary>
        /// <value>Result field value(s) extracted</value>
        [DataMember(Name="FieldValues", EmitDefaultValue=false)]
        public List<OcrPhotoTextElement> FieldValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldResult {\n");
            sb.Append("  TargetField: ").Append(TargetField).Append("\n");
            sb.Append("  FieldValues: ").Append(FieldValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldResult);
        }

        /// <summary>
        /// Returns true if FieldResult instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TargetField == input.TargetField ||
                    (this.TargetField != null &&
                    this.TargetField.Equals(input.TargetField))
                ) && 
                (
                    this.FieldValues == input.FieldValues ||
                    this.FieldValues != null &&
                    this.FieldValues.SequenceEqual(input.FieldValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TargetField != null)
                    hashCode = hashCode * 59 + this.TargetField.GetHashCode();
                if (this.FieldValues != null)
                    hashCode = hashCode * 59 + this.FieldValues.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
