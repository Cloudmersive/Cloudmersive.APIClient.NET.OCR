/* 
 * ocrapi
 *
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.OCR.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.OCR.Model
{
    /// <summary>
    /// Definition of a column within a table for OCR data extraction from images
    /// </summary>
    [DataContract]
    public partial class FormTableColumnDefinition :  IEquatable<FormTableColumnDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FormTableColumnDefinition" /> class.
        /// </summary>
        /// <param name="columnID">The identifier of the field; use this to identify which field is being referenced.</param>
        /// <param name="topAnchor">Optional - the top anchor of the column heading.</param>
        /// <param name="anchorMode">Optional - the matching mode for the anchor.  Possible values are Complete (requires the entire anchor to match) and Partial (allows only part of the anchor to match).  Default is Partial..</param>
        /// <param name="dataType">The data type of the field; possible values are INTEGER (Integer value), STRING (Arbitrary string value, spaces are permitted), DATE (Date in a structured format), DECIMAL (Decimal number), ALPHANUMERIC (Continuous alphanumeric string with no spaces), STRINGNOWHITESPACE (A string that contains no whitespace characters), SERIALNUMBER (A serial-number style string that contains letters and numbers, and certain symbols; must contain at least one number), ALPHAONLY (Alphabet characters only, no numbers or symbols or whitespace).</param>
        /// <param name="minimumCharacterCount">Optional - the target number of digits in the field; useful for fixed-length fields.</param>
        /// <param name="allowNumericDigits">Optional - set to false to block values that contain numeric digits, set to true to allow numeric digits.</param>
        public FormTableColumnDefinition(string columnID = default(string), string topAnchor = default(string), string anchorMode = default(string), string dataType = default(string), int? minimumCharacterCount = default(int?), bool? allowNumericDigits = default(bool?))
        {
            this.ColumnID = columnID;
            this.TopAnchor = topAnchor;
            this.AnchorMode = anchorMode;
            this.DataType = dataType;
            this.MinimumCharacterCount = minimumCharacterCount;
            this.AllowNumericDigits = allowNumericDigits;
        }
        
        /// <summary>
        /// The identifier of the field; use this to identify which field is being referenced
        /// </summary>
        /// <value>The identifier of the field; use this to identify which field is being referenced</value>
        [DataMember(Name="ColumnID", EmitDefaultValue=false)]
        public string ColumnID { get; set; }

        /// <summary>
        /// Optional - the top anchor of the column heading
        /// </summary>
        /// <value>Optional - the top anchor of the column heading</value>
        [DataMember(Name="TopAnchor", EmitDefaultValue=false)]
        public string TopAnchor { get; set; }

        /// <summary>
        /// Optional - the matching mode for the anchor.  Possible values are Complete (requires the entire anchor to match) and Partial (allows only part of the anchor to match).  Default is Partial.
        /// </summary>
        /// <value>Optional - the matching mode for the anchor.  Possible values are Complete (requires the entire anchor to match) and Partial (allows only part of the anchor to match).  Default is Partial.</value>
        [DataMember(Name="AnchorMode", EmitDefaultValue=false)]
        public string AnchorMode { get; set; }

        /// <summary>
        /// The data type of the field; possible values are INTEGER (Integer value), STRING (Arbitrary string value, spaces are permitted), DATE (Date in a structured format), DECIMAL (Decimal number), ALPHANUMERIC (Continuous alphanumeric string with no spaces), STRINGNOWHITESPACE (A string that contains no whitespace characters), SERIALNUMBER (A serial-number style string that contains letters and numbers, and certain symbols; must contain at least one number), ALPHAONLY (Alphabet characters only, no numbers or symbols or whitespace)
        /// </summary>
        /// <value>The data type of the field; possible values are INTEGER (Integer value), STRING (Arbitrary string value, spaces are permitted), DATE (Date in a structured format), DECIMAL (Decimal number), ALPHANUMERIC (Continuous alphanumeric string with no spaces), STRINGNOWHITESPACE (A string that contains no whitespace characters), SERIALNUMBER (A serial-number style string that contains letters and numbers, and certain symbols; must contain at least one number), ALPHAONLY (Alphabet characters only, no numbers or symbols or whitespace)</value>
        [DataMember(Name="DataType", EmitDefaultValue=false)]
        public string DataType { get; set; }

        /// <summary>
        /// Optional - the target number of digits in the field; useful for fixed-length fields
        /// </summary>
        /// <value>Optional - the target number of digits in the field; useful for fixed-length fields</value>
        [DataMember(Name="MinimumCharacterCount", EmitDefaultValue=false)]
        public int? MinimumCharacterCount { get; set; }

        /// <summary>
        /// Optional - set to false to block values that contain numeric digits, set to true to allow numeric digits
        /// </summary>
        /// <value>Optional - set to false to block values that contain numeric digits, set to true to allow numeric digits</value>
        [DataMember(Name="AllowNumericDigits", EmitDefaultValue=false)]
        public bool? AllowNumericDigits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormTableColumnDefinition {\n");
            sb.Append("  ColumnID: ").Append(ColumnID).Append("\n");
            sb.Append("  TopAnchor: ").Append(TopAnchor).Append("\n");
            sb.Append("  AnchorMode: ").Append(AnchorMode).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  MinimumCharacterCount: ").Append(MinimumCharacterCount).Append("\n");
            sb.Append("  AllowNumericDigits: ").Append(AllowNumericDigits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FormTableColumnDefinition);
        }

        /// <summary>
        /// Returns true if FormTableColumnDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of FormTableColumnDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormTableColumnDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ColumnID == input.ColumnID ||
                    (this.ColumnID != null &&
                    this.ColumnID.Equals(input.ColumnID))
                ) && 
                (
                    this.TopAnchor == input.TopAnchor ||
                    (this.TopAnchor != null &&
                    this.TopAnchor.Equals(input.TopAnchor))
                ) && 
                (
                    this.AnchorMode == input.AnchorMode ||
                    (this.AnchorMode != null &&
                    this.AnchorMode.Equals(input.AnchorMode))
                ) && 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && 
                (
                    this.MinimumCharacterCount == input.MinimumCharacterCount ||
                    (this.MinimumCharacterCount != null &&
                    this.MinimumCharacterCount.Equals(input.MinimumCharacterCount))
                ) && 
                (
                    this.AllowNumericDigits == input.AllowNumericDigits ||
                    (this.AllowNumericDigits != null &&
                    this.AllowNumericDigits.Equals(input.AllowNumericDigits))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ColumnID != null)
                    hashCode = hashCode * 59 + this.ColumnID.GetHashCode();
                if (this.TopAnchor != null)
                    hashCode = hashCode * 59 + this.TopAnchor.GetHashCode();
                if (this.AnchorMode != null)
                    hashCode = hashCode * 59 + this.AnchorMode.GetHashCode();
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.MinimumCharacterCount != null)
                    hashCode = hashCode * 59 + this.MinimumCharacterCount.GetHashCode();
                if (this.AllowNumericDigits != null)
                    hashCode = hashCode * 59 + this.AllowNumericDigits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
