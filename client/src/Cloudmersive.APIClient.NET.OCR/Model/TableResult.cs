/* 
 * ocrapi
 *
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.OCR.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.OCR.Model
{
    /// <summary>
    /// The result of reading a table via OCR from a form
    /// </summary>
    [DataContract]
    public partial class TableResult :  IEquatable<TableResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TableResult" /> class.
        /// </summary>
        /// <param name="tableDefinition">The input table definition for reference.</param>
        /// <param name="tableRowsResult">Rows of data in the table.</param>
        public TableResult(FormTableDefinition tableDefinition = default(FormTableDefinition), List<TableRowResult> tableRowsResult = default(List<TableRowResult>))
        {
            this.TableDefinition = tableDefinition;
            this.TableRowsResult = tableRowsResult;
        }
        
        /// <summary>
        /// The input table definition for reference
        /// </summary>
        /// <value>The input table definition for reference</value>
        [DataMember(Name="TableDefinition", EmitDefaultValue=false)]
        public FormTableDefinition TableDefinition { get; set; }

        /// <summary>
        /// Rows of data in the table
        /// </summary>
        /// <value>Rows of data in the table</value>
        [DataMember(Name="TableRowsResult", EmitDefaultValue=false)]
        public List<TableRowResult> TableRowsResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TableResult {\n");
            sb.Append("  TableDefinition: ").Append(TableDefinition).Append("\n");
            sb.Append("  TableRowsResult: ").Append(TableRowsResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TableResult);
        }

        /// <summary>
        /// Returns true if TableResult instances are equal
        /// </summary>
        /// <param name="input">Instance of TableResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TableResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TableDefinition == input.TableDefinition ||
                    (this.TableDefinition != null &&
                    this.TableDefinition.Equals(input.TableDefinition))
                ) && 
                (
                    this.TableRowsResult == input.TableRowsResult ||
                    this.TableRowsResult != null &&
                    this.TableRowsResult.SequenceEqual(input.TableRowsResult)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TableDefinition != null)
                    hashCode = hashCode * 59 + this.TableDefinition.GetHashCode();
                if (this.TableRowsResult != null)
                    hashCode = hashCode * 59 + this.TableRowsResult.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
