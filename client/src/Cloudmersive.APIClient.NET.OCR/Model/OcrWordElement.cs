/* 
 * ocrapi
 *
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.OCR.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.OCR.Model
{
    /// <summary>
    /// A single word in an OCR document
    /// </summary>
    [DataContract]
    public partial class OcrWordElement :  IEquatable<OcrWordElement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OcrWordElement" /> class.
        /// </summary>
        /// <param name="WordText">Text of the word.</param>
        /// <param name="LineNumber">Line number of the word.</param>
        /// <param name="WordNumber">Index of the word in the line.</param>
        /// <param name="XLeft">X location of the left edge of the word in pixels.</param>
        /// <param name="YTop">Y location of the top edge of the word in pixels.</param>
        /// <param name="Width">Width of the word in pixels.</param>
        /// <param name="Height">Height of the word in pixels.</param>
        /// <param name="ConfidenceLevel">Confidence level of the machine learning result; possible values are 0.0 (lowest accuracy) - 1.0 (highest accuracy).</param>
        /// <param name="BlockNumber">Index of the containing block.</param>
        /// <param name="ParagraphNumber">Index of the containing paragraph.</param>
        /// <param name="PageNumber">Index of the containing page.</param>
        public OcrWordElement(string WordText = default(string), int? LineNumber = default(int?), int? WordNumber = default(int?), int? XLeft = default(int?), int? YTop = default(int?), int? Width = default(int?), int? Height = default(int?), double? ConfidenceLevel = default(double?), int? BlockNumber = default(int?), int? ParagraphNumber = default(int?), int? PageNumber = default(int?))
        {
            this.WordText = WordText;
            this.LineNumber = LineNumber;
            this.WordNumber = WordNumber;
            this.XLeft = XLeft;
            this.YTop = YTop;
            this.Width = Width;
            this.Height = Height;
            this.ConfidenceLevel = ConfidenceLevel;
            this.BlockNumber = BlockNumber;
            this.ParagraphNumber = ParagraphNumber;
            this.PageNumber = PageNumber;
        }
        
        /// <summary>
        /// Text of the word
        /// </summary>
        /// <value>Text of the word</value>
        [DataMember(Name="WordText", EmitDefaultValue=false)]
        public string WordText { get; set; }

        /// <summary>
        /// Line number of the word
        /// </summary>
        /// <value>Line number of the word</value>
        [DataMember(Name="LineNumber", EmitDefaultValue=false)]
        public int? LineNumber { get; set; }

        /// <summary>
        /// Index of the word in the line
        /// </summary>
        /// <value>Index of the word in the line</value>
        [DataMember(Name="WordNumber", EmitDefaultValue=false)]
        public int? WordNumber { get; set; }

        /// <summary>
        /// X location of the left edge of the word in pixels
        /// </summary>
        /// <value>X location of the left edge of the word in pixels</value>
        [DataMember(Name="XLeft", EmitDefaultValue=false)]
        public int? XLeft { get; set; }

        /// <summary>
        /// Y location of the top edge of the word in pixels
        /// </summary>
        /// <value>Y location of the top edge of the word in pixels</value>
        [DataMember(Name="YTop", EmitDefaultValue=false)]
        public int? YTop { get; set; }

        /// <summary>
        /// Width of the word in pixels
        /// </summary>
        /// <value>Width of the word in pixels</value>
        [DataMember(Name="Width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// Height of the word in pixels
        /// </summary>
        /// <value>Height of the word in pixels</value>
        [DataMember(Name="Height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// Confidence level of the machine learning result; possible values are 0.0 (lowest accuracy) - 1.0 (highest accuracy)
        /// </summary>
        /// <value>Confidence level of the machine learning result; possible values are 0.0 (lowest accuracy) - 1.0 (highest accuracy)</value>
        [DataMember(Name="ConfidenceLevel", EmitDefaultValue=false)]
        public double? ConfidenceLevel { get; set; }

        /// <summary>
        /// Index of the containing block
        /// </summary>
        /// <value>Index of the containing block</value>
        [DataMember(Name="BlockNumber", EmitDefaultValue=false)]
        public int? BlockNumber { get; set; }

        /// <summary>
        /// Index of the containing paragraph
        /// </summary>
        /// <value>Index of the containing paragraph</value>
        [DataMember(Name="ParagraphNumber", EmitDefaultValue=false)]
        public int? ParagraphNumber { get; set; }

        /// <summary>
        /// Index of the containing page
        /// </summary>
        /// <value>Index of the containing page</value>
        [DataMember(Name="PageNumber", EmitDefaultValue=false)]
        public int? PageNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OcrWordElement {\n");
            sb.Append("  WordText: ").Append(WordText).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  WordNumber: ").Append(WordNumber).Append("\n");
            sb.Append("  XLeft: ").Append(XLeft).Append("\n");
            sb.Append("  YTop: ").Append(YTop).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  ConfidenceLevel: ").Append(ConfidenceLevel).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  ParagraphNumber: ").Append(ParagraphNumber).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OcrWordElement);
        }

        /// <summary>
        /// Returns true if OcrWordElement instances are equal
        /// </summary>
        /// <param name="input">Instance of OcrWordElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OcrWordElement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WordText == input.WordText ||
                    (this.WordText != null &&
                    this.WordText.Equals(input.WordText))
                ) && 
                (
                    this.LineNumber == input.LineNumber ||
                    (this.LineNumber != null &&
                    this.LineNumber.Equals(input.LineNumber))
                ) && 
                (
                    this.WordNumber == input.WordNumber ||
                    (this.WordNumber != null &&
                    this.WordNumber.Equals(input.WordNumber))
                ) && 
                (
                    this.XLeft == input.XLeft ||
                    (this.XLeft != null &&
                    this.XLeft.Equals(input.XLeft))
                ) && 
                (
                    this.YTop == input.YTop ||
                    (this.YTop != null &&
                    this.YTop.Equals(input.YTop))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.ConfidenceLevel == input.ConfidenceLevel ||
                    (this.ConfidenceLevel != null &&
                    this.ConfidenceLevel.Equals(input.ConfidenceLevel))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.ParagraphNumber == input.ParagraphNumber ||
                    (this.ParagraphNumber != null &&
                    this.ParagraphNumber.Equals(input.ParagraphNumber))
                ) && 
                (
                    this.PageNumber == input.PageNumber ||
                    (this.PageNumber != null &&
                    this.PageNumber.Equals(input.PageNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WordText != null)
                    hashCode = hashCode * 59 + this.WordText.GetHashCode();
                if (this.LineNumber != null)
                    hashCode = hashCode * 59 + this.LineNumber.GetHashCode();
                if (this.WordNumber != null)
                    hashCode = hashCode * 59 + this.WordNumber.GetHashCode();
                if (this.XLeft != null)
                    hashCode = hashCode * 59 + this.XLeft.GetHashCode();
                if (this.YTop != null)
                    hashCode = hashCode * 59 + this.YTop.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.ConfidenceLevel != null)
                    hashCode = hashCode * 59 + this.ConfidenceLevel.GetHashCode();
                if (this.BlockNumber != null)
                    hashCode = hashCode * 59 + this.BlockNumber.GetHashCode();
                if (this.ParagraphNumber != null)
                    hashCode = hashCode * 59 + this.ParagraphNumber.GetHashCode();
                if (this.PageNumber != null)
                    hashCode = hashCode * 59 + this.PageNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
